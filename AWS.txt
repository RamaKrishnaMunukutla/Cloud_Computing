


   .....TypeOfServices

   .....ComputerServices.........EC2Details........
   
    ....StorageServices.......DataBaseServices.....NetworkServices

   .....DeveloperTools........SecurityIdentityAndCompilanceService..........AWSCloudFront 

   ....MonitoringAndManagement   
   

==============================================================================================================

   https://aws.amazon.com/console/  ///mvsrkri007 /// Amazon910@#

  https://www.nareshit.com/aws-online-training/
  
  http://www.dot.tk/en/index.html?lang=en
  
  
  Bucket (S3) ----> bucketDemo
  
    YouTube ----> Java-Techie /// Tech-Primers 


===============================================================================================================

 --- Provides (Shared)-Services on Demand and  access Over Network .

    Popular Cloud Services ----->  AWS, Azure, GCP, Oracle, IBM , Alibaba 

   Cloud Types ----> Public(Above), 
                     Private (Dell, Siemens) , 
					 Hybrid (Public + Private)
					 
 TypeOfServices :=
~~~~~~~~~~~~~~~~~~
 
 (a) Iaas ---> Provides Upto OS-Level                           /// Pizza Making at Home 
 (b) Paas ---> Provides Upto Installed-Sotware RunTime_Level   /// Pizza going @ Hotel && Eat 
 (c) Saas ----> (Ready)                                       /// Pizza Home Delivery && Eat   
 
 
 VM Based Model Deploy :=
~~~~~~~~~~~~~~~~~~~~~~~
  Ansible // Puppte // Cheft 
  
  
 Types of Deployment-Model :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Public Cloud  //// Private Cloud //// Hybrid Cloud


 Web Hosting Platforms(has PAAS) :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   OPen Shift (Red-Shift)  /// Google-As-Engine ///  EBS /// Azure-App-Service
   
	
 Types of Cloud-Provider  :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~
 	AWS ///  Microsoft-Azure  ///  IBM Cloud  //// Google Cloud Platform (GCP)  
	
	
 Advantages of AWS :=  [Pay-As-You-Go Model]
~~~~~~~~~~~~~~~~~~~~ 
  Flexibility ///  Scalability //// Cost-Effective  //// Security 
  
  
 AWS Global Infrs-Structure :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   Regions /// Availability-Zones 
   
 
===============================================================================================================
 
 ComputerServices :=  
~~~~~~~~~~~~~~~~~~~~
 --- Used to Build , Deploy && Scale an application in Cloud-Platform. 
 --- REMOTE-DESKTOP-CONNECTION  (Default-App in Comp)  //// PUTTY (Connect EC2-Instance with Local-Machine)
 ---    VOLUMES (Attach && Detach) && SNAP-SHOTS 

    Eg :=  (1) EC2 (***)   (2) AWS-Lambda (***)      (3) Elastic-Conatiner-Service (ECS) , 
	       (4) Elastic-Load-Balancer (ELB) ,         (5) Elastic-Bean-Stack (EBS)  (***) 
		   
	
   
   
 (1) EC2 Instance :=   //// virtual server in the cloud.  
~~~~~~~~~~~~~~~~~~ 
 --- Used to Rent 'VM' && Resize the Compute-Capacity
 --- Billing Based on 'HOURLY' Service-Usage. (***)
	 
 
  EC2 (Elastic Cloud EC2Details) := has AMI (Amazon machine Image) to launch the instance of Operating System. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 --- Gives Virtual Machines to run applications on them .
 --- Uses 'SSH' Protocal to Communicate (Port-22) with Local-Systems 
 
    (a) Public-Key ----> Remote Machine  /// 2048-bit SSH-2 RSA keys ( Cannot Decrypt which is Encrypted ) 
	                     Can Create 5000 Keys Per Region 
	
	(b) Private-Key ---> Client Machine  /// Used to communicate with Remote Machine


 AMIs :=  Creates Images for that Particular EC2-Instance 
~~~~~~ 

 Volumes := Back-Stories attched to EC2-Instance. 
~~~~~~~~~~
 

 EC2 Instance Creation :=
~~~~~~~~~~~~~~~~~~~~~~~
  Services ---> EC2 ---> New Instance ----> Select Free ---> Next(2) ----> Give OS--Name 


 Putty && PuTTY Gen := /// Connects EC2 Instance to Local Machine(Windows)
~~~~~~~~~~~~~~~~~~~~~~
 --- To Connect to any Machine Using SSH .
 --- Converst Downloaded Private Key to PPK Format using PuTTY-Gen , Load-file to Under SSH/OATH Section . 
 
=================================

 (2) AWS-Lambda (ServerLess Compute Service ):= Used to execute code for Specific-Application. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 --- These are building-Blocks used to deploy application in cloud. 
 --- Billing Based on '100-MilliSeonds' Service-Usage. (**Unlike Runs on 'HOUR' Basis **)
 --- Works on Trigger-Based (Data Inserted), which should be processed by 'AWS-Lambda' Having "Function" 
 
 --- Only used to Executes background Tasks. (***********)
 
      Function ---> Having Executable Logic-Of-Email that will Sends to End-User. 
	  
==============================

 (5) Elastic-Bean-Stack (EBS) :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 --- It is a PAAS-Service used for  deploying && Scaling Web-Apps(Java, Dot-Net) && Services. 
 --- It creates Dedicated Separate-FOLDER (Contains all data)  when Web-App is deployed in it.
 --- Maintains App-Versions 
 --- It is a Paas Service used for deploying and Scaling Web applications (Java, Dot-Net) into Servers (Tomcat, NgiNx,ISS) 
 --- Using this, we can Easily Deploy Apps && Supports Auto-Scaling Feature 
 --- Shows Environment-Health based on Colors . 
 
 
 
 
   
=======================================================================================================================

 StorageServices :=
~~~~~~~~~~~~~~~~~
 --- Stores Data && Advantage is to Disaster-Data recovery with High durability. 

  Eg :=  (1) S3  (2) EFS   (3) StorageGateWay  (4) AWS-BackUp


 (1) S3-Bucket :=  /// Invokes AWS-Lambda
~~~~~~~~~~~~~~~~
 --- Open Cloud-Based Storage Service used for Online-Data Backup (Stores Files && Objects) . 
 --- (Versioning) It can have Multiple-Version of Object in One-Bucket.  (Can delete it)
 --- By Default Versioning is Disabled. 
 --- It has 3 Storage-Classes (a) Standard  
                              (b) Infrequent-Access 
							  (c) Glacier
					
					
 Cross Region Replication :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~
 --- Enables Automatic && Asynchronous copying of Object Across the Bucket in different AWS Regions. 
 --- MOVE-Buckets configured here can be Owned by the AWS account (Or) Different account .
 
 Bucket Policy := Protects Data in Bucket. 
~~~~~~~~~~~~~~~~
 
 
 Eg :=  S3-Bucket will be Processed by AWS-Lambda, which inturn (Sends Email with all-Details) 
~~~~~~
 --- Need to Configure (a) SQS (Simple-Queue-Service) && 
                       (b) SES (Simple-Email-Service)
  
 
   SQS ------ hellolambda
   SES ------
  lambda ---- myFunction
	 s3 ----- edureka-demo
  route-53 -- edureka.tk 

==========================================

   Elastic Load Balancer :=
~~~~~~~~~~~~~~~~~~~~~~~~~~
 --- Distributes the Traffic-load to different EC2-Instances
 
 
  Web Server Environment :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Bean Stalk Environment /// ELB  /// AutoScaling-Group /// EC2-Instances //// Host-Manager /// Security-Groups 
 
 
 Workers Environment  :=
~~~~~~~~~~~~~~~~~~~~~~
 --- Web-Server forward request to it when the Request is Consuming lot of Resources, which causes Denying Other-Requests. 
 --- This may leads to Perofrmance && Request-Handle Capacity of Web-Server decreases. 
 --- Defined as Process that handles background tasks during Time-ITENSIVE-Operation. 
 --- Used to (a) Email Notification
             (b) Generates Reports 
             (c) Clean Up Databases. 			 

=======================================================================================================================

 DataBaseServices :=  
~~~~~~~~~~~~~~~~~~~
 ---  Cost-Efficient , High-Secure && Scalable  database Instances in Cloud. 
 
   Eg :=  (1) RDS  (2) DynamoDB  (3) Elastic-Cache  (4) Amazon-Redshift 
 
 
 Advantages of cloud database :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 (1) Lower costs
~~~~~~~~~~~~~~~~~~
 --- Generally, company provider does not have to invest in databases. It can maintain and support one or more data centers.

 (2) Automated
~~~~~~~~~~~~~~~~~~
 --- Cloud databases are enriched with a variety of automated processes such as recovery, failover, and auto-scaling.

 (3) Increased accessibility
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 --- You can access your cloud-based database from any location, anytime. All you need is just an internet connection.
 

 (1) RDS :=  It is RDBMS
~~~~~~~~~~~


 (2) DynamoDB :=
~~~~~~~~~~~~~~~~
 --- It gives Fast && Reliable Performance with no Scalability Issues. 


=======================================================================================================================
 
 NetworkServices :=
~~~~~~~~~~~~~~~~~~~
 --- It is Virtual Network where we can launch in AWS resources. 
 --- Connects Physical Network to Private VN with high transfer Speed. 
 
   Eg :=  (1) VPC  (2) Route-53  (3) Direct-Connect  (4) Cloud-Front
 
 
 (1) VPC :=
~~~~~~~~~
 --- Deploys AWS-Services(EC2-Instance) into Private-Virtual-Cloud
 
 
 (2) Route-53 :=
~~~~~~~~~~~~~~~~~
 --- It is High Available DNS that helps user to Route by tranaslating text to IP Address.  


     Dynamic DNS :=
	~~~~~~~~~~~~~~
           --- Assigns Custom Domain Name to IP_Address. 
		   --- Domain Name automatically updated when IP_Address Changes.


 (3) Direct-Connect :=
~~~~~~~~~~~~~~~~~~~~~
 --- It is direct connect to AWS Infra-Structure.  

 
=======================================================================================================================

 DeveloperTools (AWS-DevOps-Tools) :=   
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 --- Used to Build, deploy and Run application Source-Code Automatically. 
 --- Also updates Server and Instance Workload. 
  
  (1) Code-Star  (2) Code-Build  (3) Code-Deploy  (4) Code-PipeLine 
 

 (1) CoseStar :=
~~~~~~~~~~~~~~~
 --- Designed to Manage App-Dev at Single-Place. 
 
 
 
=======================================================================================================================
 
 SecurityIdentityAndCompilanceService :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 --- Monitors Safe-Environment for your AWS resources by providing Limited-Access to Specific-User. 
 
  Eg :=  (1) IAM  (2) KMS  (3) Cognito  (4) WAF 

=======================================================================================================================\

 AWSCloudFront :=    /// Caches Data 
~~~~~~~~~~~~~~~~~~
 --- It is WEB-SERVICE that speed-Up distributing of Static && Dynamic Web-Content like (.html, .css. .js , Images) to users. 
 --- Delivery makes fast by sitting betwwen User-Request && Server.
 --- Through  Edge Location  , can able to access daat faster. 
 
                  Routing ---- Edge-Location ---- More Availability 
				  
				Request ---- Edge Location --- Server. 
 
=======================================================================================================================
 
 MonitoringAndManagement :=
~~~~~~~~~~~~~~~~~~~~~~~~~
 --- Monitoring Tools used to send notification When-ever Virtual-Servers are not in Much (Less) used. 
 
 
 Uses :=
~~~~~~~ 
 --- Provide Details report on Performance of Application on Cloud && Reduces the Excess Operative-Cost on Services. 
 --- Monitors the User Experience && Creates Reports which is used to to Improvement. 
 
      Eg :=  Amazon Cloud Watch , 
	~~~~~~
 
 
 (1) Amazon Cloud Watch :=  /// Basic && Detail Monitoring 
~~~~~~~~~~~~~~~~~~~~~~~~~~
 --- Monitors AWS-Resources (EC2, ELB, S3, D/b))  && Customer Application Running on AWS Infra-Structure. 
 --- Monitors && Responses to the Changes happen to AWS-Resources.
 --- Amazon-Cloud-Watch used to Start && Stops Instances Automatically.  (********)

                                Event --- Rule(Schedule-Time) ---- Target  
 
   Eg := Sends Email (Through SNS-Service) to AWS-Admin Stating that "-- Instance-CPU Utilization is LESS_THAN 25% --" .
  ~~~~
                                                               Triggers
   Eg := EC2(State-Changes) ---> Cloud-Watch(Event Rule-Trigger) ---> Lambda 'f'---> Route-53 (Maps Domain-Name to IP-Address) 
  ~~~~                                                                   
                                                              Note := Lambda 'f' Creates / Removes Records in Route-53.
													         ~~~~~~
  
 
  
  Flow (4:22:00) :=
~~~~~~~~~~~~~~~~~~~
    (a) IAM   (StartAndStopInstances) :: Assigns Permission to Lambda 'f' to EC-2 Instances. 
	(b) Lambda (StartAndStopFunction)  ::  Create 'f' && Add Role (Created Recently)
    (c 
 
  Amazon Cloud Logs :=  /// Event-Viewer (Def) ---> Windows-Logs ---> Systems ---> Has Bunch of Log-Files. 
~~~~~~~~~~~~~~~~~~~~
 --- Used to access Log files form EC2 / Route-53  
 
===================================================
 
 (2) Cloud Formation :=
~~~~~~~~~~~~~~~~~~~~~~
 --- Set up AWS-Resources so that we can Focus on Application that runbs in AWS. 

===================================================

 Load Balancer :=
~~~~~~~~~~~~~~~




=======================================================================================================================

 IAM :=
~~~~~~

   Craete Policy :=
~~~~~~~~~~~~~~~~~~~
{
    "Version": "2012-10-17",
    "Statement": [    
    {
     "Effect" : "Allow",
	 "Action" : ["dynamodb:PutItem"],
	 "Resource" : ["*"]
    },
    {
     "Effect" : "Allow",
	 "Action" : ["ssn:Publish"],
	 "Resource" : ["*"]
    } 
   ]
}


=======================================================================================================================


=======================================================================================================================


=======================================================================================================================


=======================================================================================================================


=======================================================================================================================


=======================================================================================================================


=======================================================================================================================


=======================================================================================================================\


=======================================================================================================================


=======================================================================================================================


=======================================================================================================================


=======================================================================================================================


=======================================================================================================================


=======================================================================================================================



=======================================================================================================================


=======================================================================================================================


=======================================================================================================================\


=======================================================================================================================


=======================================================================================================================


=======================================================================================================================


=======================================================================================================================


=======================================================================================================================


=======================================================================================================================


  
================================================================================================================ 
  
  
================================================================================================================ 
  
  
================================================================================================================   
  
  
================================================================================================================ 
    
  
================================================================================================================ 
  
  
================================================================================================================
 
  
================================================================================================================ 
  
  
================================================================================================================
 
  
================================================================================================================ 
  
  
================================================================================================================
 
  
================================================================================================================ 
  
  









































































































